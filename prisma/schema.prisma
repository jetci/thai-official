// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. Add the Announcement model here
model announcements {
  id                     Int       @id @default(autoincrement())
  title                  String
  agency                 String? // Optional field
  details                String? // Optional field
  application_start_date DateTime?
  application_end_date   DateTime?
  official_link          String?
  created_at             DateTime  @default(now())

    @@map("announcements") // Map this model to the "announcements" table
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String @unique

  questions Question[]

  @@map("subjects")
}

// 1. User & Role Management

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique // e.g., 'admin', 'staff', 'vip_member', 'general_member'
  users User[]

  @@map("roles")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password_hash String
  fullName      String?  @map("full_name")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  roleId Int    @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Position {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions PositionQuestion[]
}

// ตารางเก็บคำถาม
model Question {
  id             Int                @id @default(autoincrement())
  question_text  String
  // questionType   String             @default("multiple_choice") // Renamed from questionType to match DTO
  difficulty     String?            @default("medium")
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt

  subject_id Int
  subject    Subject @relation(fields: [subject_id], references: [id])

  choices   Choice[]
  positions PositionQuestion[]

  // For consistency with DTOs and service logic
  @@map("questions")
}

// ตารางเก็บตัวเลือกสำหรับคำถาม
model Choice {
  id          Int     @id @default(autoincrement())
  choice_text String
  is_correct  Boolean @default(false)

  question_id Int
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@map("choices")
}

// ตารางเชื่อมระหว่าง Position และ Question (Many-to-Many)
model PositionQuestion {
  position_id Int
  position    Position @relation(fields: [position_id], references: [id], onDelete: Cascade)

  question_id Int
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@id([position_id, question_id])
  @@map("position_questions")
}
