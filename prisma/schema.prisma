// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  password       String
  role           Role           @default(USER)
  profile        Profile?
  subscriptions  Subscription[]
  announcements  Announcement[]
  refreshTokens  RefreshToken[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model RefreshToken {
  id                 String    @id @default(cuid())
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  jti                String    @unique
  tokenHash          String    @db.Text
  expiresAt          DateTime
  revokedAt          DateTime?
  replacedByToken    RefreshToken? @relation("TokenReplacement", fields: [replacedByTokenId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replacedByTokenId  String?       @unique
  previousTokens     RefreshToken[] @relation("TokenReplacement")
  createdAt          DateTime  @default(now())
  userAgent          String?
  ip                 String?

  @@index([userId])
}

model Profile {
  id        String  @id @default(cuid())
  firstName String?
  lastName  String?
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
}

model Subject {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Question {
  id        String   @id @default(cuid())
  title     String
  content   String?
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  choices   Choice[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Choice {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscription {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique // A user can only have one subscription
  plan      String // e.g., 'FREE', 'PREMIUM'
  status    String // e.g., 'ACTIVE', 'CANCELED'
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
  STAFF
  VIP
}


